name: Get File

on:
  # Trigger the workflow manually from GitHub UI
  workflow_dispatch:
    inputs:
      start:
        description: 'Start index for pagination'
        required: false
        default: '0'
      page_size:
        description: 'Number of items per page'
        required: false
        default: '10'
      query:
        description: 'Search query'
        required: false
        default: 'index'
  
  # Or trigger on push to main branch
  # push:
  #   branches: [ main ]

jobs:
  call-api:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Call Verint API
      env:
        API_BASE_URL: https://sheffielddev.resources.ukpreview.empro.verintcloudservices.com
        # Store credentials in GitHub Secrets (recommended)
        API_USERNAME: ${{ secrets.VERINT_USERNAME }}
        API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
      run: |
        # Set default values if inputs are not provided
        START="${{ github.event.inputs.start || '0' }}"
        PAGE_SIZE="${{ github.event.inputs.page_size || '10' }}"
        QUERY="${{ github.event.inputs.query || 'index' }}"
        
        echo "Making API call with parameters:"
        echo "Start: $START"
        echo "Page Size: $PAGE_SIZE"
        echo "Query: $QUERY"
        echo "Username: $API_USERNAME"
        
        # Make the API call using username:password authentication
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -X 'GET' \
          "${API_BASE_URL}/files?start=${START}&page_size=${PAGE_SIZE}&query=${QUERY}" \
          -H 'accept: application/json' \
          -u "${API_USERNAME}:${API_PASSWORD}")
        
        # Extract HTTP status code
        http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        
        # Extract response body
        body=$(echo $response | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
        
        echo "HTTP Status Code: $http_code"
        echo "Response Body: $body"
        
        # Check if the request was successful
        if [ $http_code -eq 200 ]; then
          echo "‚úÖ API call successful!"
          echo "$body" > api_response.json
          
          # Parse and display the response in a readable format
          echo ""
          echo "================== API RESPONSE =================="
          
          # Extract summary information
          start=$(echo "$body" | jq -r '.start // "N/A"')
          pageSize=$(echo "$body" | jq -r '.pageSize // "N/A"')
          total=$(echo "$body" | jq -r '.total // "N/A"')
          
          echo "üìä Summary:"
          echo "   Start: $start"
          echo "   Page Size: $pageSize"
          echo "   Total Results: $total"
          echo ""
          
          # Check if there are any files in the collection
          file_count=$(echo "$body" | jq '.collection | length')
          
          if [ "$file_count" -gt 0 ]; then
            echo "üìÅ Files Found ($file_count):"
            echo ""
            
            # Loop through each file and display details
            for i in $(seq 0 $((file_count - 1))); do
              fileName=$(echo "$body" | jq -r ".collection[$i].fileName // \"N/A\"")
              folderName=$(echo "$body" | jq -r ".collection[$i].folderName // \"N/A\"")
              fileType=$(echo "$body" | jq -r ".collection[$i].fileType // \"N/A\"")
              size=$(echo "$body" | jq -r ".collection[$i].size // \"N/A\"")
              distributionLink=$(echo "$body" | jq -r ".collection[$i].distributionLink // \"N/A\"")
              key=$(echo "$body" | jq -r ".collection[$i].key // \"N/A\"")
              
              # Convert size to human readable format
              if [ "$size" != "N/A" ] && [ "$size" -gt 0 ]; then
                if [ "$size" -gt 1048576 ]; then
                  size_display=$(echo "scale=2; $size / 1048576" | bc)"MB"
                elif [ "$size" -gt 1024 ]; then
                  size_display=$(echo "scale=2; $size / 1024" | bc)"KB"
                else
                  size_display="${size}B"
                fi
              else
                size_display="N/A"
              fi
              
              echo "   File $((i + 1)):"
              echo "   ‚îú‚îÄ‚îÄ Name: $fileName"
              echo "   ‚îú‚îÄ‚îÄ Folder: $folderName"
              echo "   ‚îú‚îÄ‚îÄ Type: $fileType"
              echo "   ‚îú‚îÄ‚îÄ Size: $size_display"
              echo "   ‚îú‚îÄ‚îÄ Key: $key"
              echo "   ‚îî‚îÄ‚îÄ Distribution Link: $distributionLink"
              echo ""
            done
          else
            echo "üìÇ No files found in the collection"
            echo ""
          fi
          
          echo "================================================="
          echo "üíæ Full response saved to api_response.json"
          
        else
          echo "‚ùå API call failed with status code: $http_code"
          echo "Response body: $body"
          exit 1
        fi
    
    - name: Upload response as artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: api-response
        path: api_response.json
        retention-days: 7
