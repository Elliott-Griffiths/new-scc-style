name: Add File to Server

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to file in repository (e.g., scripts/main.js)'
        required: true
        type: string
      environment:
        description: 'Select the target environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - qa
          - prod

jobs:
  upload-file:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set API Base URL
        run: |
          case "${{ github.event.inputs.environment }}" in
            "dev")
              echo "API_BASE_URL=${{ secrets.VERINT_API_URL_DEV }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_QA }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_PROD }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Determine Folder and Content Type
        id: file-info
        run: |
          file_path="${{ github.event.inputs.file_path }}"
          extension="${file_path##*.}"
          folder=$(dirname "$file_path")
          
          # Handle the case where the file is in the root directory
          if [ "$folder" = "." ]; then
            folder=""
          fi

          case "$extension" in
            "js")
              content_type="text/javascript"
              ;;
            "css")
              content_type="text/css"
              ;;
            "png")
              content_type="image/png"
              ;;
            "jpg" | "jpeg")
              content_type="image/jpeg"
              ;;
            "svg")
              content_type="image/svg+xml"
              ;;
            "txt" | "md")
              content_type="text/plain"
              ;;
            *)
              echo "Error: Unknown file extension for path '$file_path'."
              exit 1
              ;;
          esac
          
          echo "FOLDER_NAME=$folder" >> $GITHUB_ENV
          echo "CONTENT_TYPE=$content_type" >> $GITHUB_ENV
          echo "File path: $file_path"
          echo "Determined folder: '$folder'"
          echo "Determined content type: $content_type"

      - name: Validate file exists
        run: |
          echo '{"status": "failed", "error": "Unknown error"}' > upload_response.json
          
          FILE_PATH="${{ github.event.inputs.file_path }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File not found: $FILE_PATH"
            echo '{"status": "failed", "error": "File not found"}' > upload_response.json
            exit 1
          fi
          
          echo "✅ File found: $FILE_PATH"
          file_size=$(stat -c%s "$FILE_PATH" 2>/dev/null || echo "unknown")
          echo "📁 File size: ${file_size} bytes"
      
      - name: Test Upload Methods
        env:
          API_USERNAME: ${{ secrets.VERINT_USERNAME }}
          API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
          FILE_PATH: ${{ github.event.inputs.file_path }}
          FOLDER_NAME: ${{ env.FOLDER_NAME }}
          CONTENT_TYPE: ${{ env.CONTENT_TYPE }}
        run: |
          filename=$(basename "$FILE_PATH")
          echo "🚀 Uploading $filename to folder: $FOLDER_NAME"
          
          declare -a methods=("folderName" "Folder" "folder")
          success=false
          final_response=""
          final_code=""
          
          for method in "${methods[@]}"; do
            echo "Attempting upload with parameter: '$method'..."
            
            if [ "$method" = "Folder" ]; then
                param="-F 'Folder={\"folderName\":\"${FOLDER_NAME}\"}'"
            else
                param="-F '${method}=${FOLDER_NAME}'"
            fi

            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X 'POST' \
              "${API_BASE_URL}/files" \
              -H 'accept: application/json' \
              -u "${API_USERNAME}:${API_PASSWORD}" \
              -H 'Content-Type: multipart/form-data' \
              -F "file=@${FILE_PATH};type=${CONTENT_TYPE}" \
              $param)
            
            http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            body=$(echo "$response" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
            
            echo "Method '$method' - HTTP Status: $http_code"
            echo "Method '$method' - Response: $body"
            echo ""

            if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                folder_in_response=$(echo "$body" | jq -r '.folderName // empty' 2>/dev/null)
                if [ "$folder_in_response" = "$FOLDER_NAME" ]; then
                    echo "✅ Method '$method' succeeded with correct folder!"
                    success=true
                    final_response="$body"
                    final_code="$http_code"
                    break
                fi
            elif [ "$http_code" -eq 409 ]; then
                echo "⚠️ Method '$method': File already exists (HTTP 409). Considering this a success."
                success=true
                final_response='{"status": "success", "message": "File already exists"}'
                final_code="$http_code"
                break
            fi
          done

          echo "================== FINAL RESULT =================="
          
          if [ "$success" = true ]; then
            echo "✅ Upload successful or file already existed."
            echo "Final response: $final_response"
            
            echo "$final_response" > upload_response.json
            
            echo ""
            echo "🔍 Verification: Checking uploaded file..."
            filename_check=$(basename "$FILE_PATH")
            verify_response=$(curl -s -u "${API_USERNAME}:${API_PASSWORD}" "${API_BASE_URL}/files?query=${filename_check}")
            
            echo "Verification response:"
            echo "$verify_response" | jq '.' 2>/dev/null || echo "$verify_response"
            
          else
            echo "❌ All upload methods failed. The file was not uploaded."
            echo ""
            echo "Troubleshooting:"
            echo "- Verify API credentials, folder existence, and permissions."
            
            echo '{"status": "failed", "error": "Upload failed or wrong folder"}' > upload_response.json
            exit 1
          fi
          
          echo "================================================="

      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upload-response-${{ github.run_number }}
          path: |
            upload_response.json
            ${{ github.event.inputs.file_path }}
          retention-days: 30
