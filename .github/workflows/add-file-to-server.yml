name: Add File to Server

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to file in repository (e.g., styles/main.css)'
        required: true
        type: string
      environment:
        description: 'Select the target environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - qa
          - prod

jobs:
  upload-file:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set API Base URL
        run: |
          case "${{ github.event.inputs.environment }}" in
            "dev")
              echo "API_BASE_URL=${{ secrets.VERINT_API_URL_DEV }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_QA }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_PROD }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Determine Folder and Content Type
        id: file-info
        run: |
          file_path="${{ github.event.inputs.file_path }}"
          extension="${file_path##*.}"
          folder=$(dirname "$file_path")
          
          # Handle the case where the file is in the root directory
          if [ "$folder" = "." ]; then
            folder=""
          fi

          case "$extension" in
            "js")
              content_type="text/javascript"
              ;;
            "css")
              content_type="text/css"
              ;;
            "png")
              content_type="image/png"
              ;;
            "jpg" | "jpeg")
              content_type="image/jpeg"
              ;;
            "svg")
              content_type="image/svg+xml"
              ;;
            "txt" | "md")
              content_type="text/plain"
              ;;
            *)
              echo "Error: Unknown file extension for path '$file_path'."
              exit 1
              ;;
          esac
          
          echo "FOLDER_NAME=$folder" >> $GITHUB_ENV
          echo "CONTENT_TYPE=$content_type" >> $GITHUB_ENV
          echo "File path: $file_path"
          echo "Determined folder: '$folder'"
          echo "Determined content type: $content_type"

      - name: Validate file exists
        run: |
          echo '{"status": "failed", "error": "Unknown error"}' > upload_response.json
          
          FILE_PATH="${{ github.event.inputs.file_path }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File not found: $FILE_PATH"
            echo '{"status": "failed", "error": "File not found"}' > upload_response.json
            exit 1
          fi
          
          echo "✅ File found: $FILE_PATH"
          file_size=$(stat -c%s "$FILE_PATH" 2>/dev/null || echo "unknown")
          echo "📁 File size: ${file_size} bytes"
      
      - name: Upload File with Dynamic Path
        env:
          API_USERNAME: ${{ secrets.VERINT_USERNAME }}
          API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
          FILE_PATH: ${{ github.event.inputs.file_path }}
          CONTENT_TYPE: ${{ env.CONTENT_TYPE }}
        run: |
          echo "🚀 Attempting upload with dynamic file path..."
          
          # Use the 'dirname' and 'basename' commands to dynamically determine the folder and filename.
          # We'll include the full path in the URL to tell the API where to place the file.
          filename=$(basename "$FILE_PATH")
          folder=$(dirname "$FILE_PATH")
          
          if [ "$folder" = "." ]; then
            # If the file is in the root, don't include a folder path in the URL
            upload_url="${API_BASE_URL}/files/${filename}"
          else
            # If there's a folder, include it in the URL
            upload_url="${API_BASE_URL}/files/${folder}/${filename}"
          fi

          echo "Uploading to URL: $upload_url"
          
          # Send the file's raw content as the request body
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X 'POST' \
            "$upload_url" \
            -H 'accept: application/json' \
            -u "${API_USERNAME}:${API_PASSWORD}" \
            -H "Content-Type: $CONTENT_TYPE" \
            --data-binary @"$FILE_PATH")
          
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          echo ""

          success=false
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
              echo "✅ Upload succeeded!"
              success=true
          elif [ "$http_code" -eq 409 ]; then
              echo "⚠️ File already exists (HTTP 409). Considering this a success."
              success=true
          fi
          
          echo "================== FINAL RESULT =================="
          
          if [ "$success" = true ]; then
            echo "✅ Upload successful or file already existed."
            echo "$body" > upload_response.json
          else
            echo "❌ Upload failed. The file was not uploaded."
            echo '{"status": "failed", "error": "Upload failed or wrong folder"}' > upload_response.json
            exit 1
          fi
          
          echo "================================================="
      
      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upload-response-${{ github.run_number }}
          path: |
            upload_response.json
            ${{ github.event.inputs.file_path }}
          retention-days: 30
This video provides a great overview of the basics of GitHub Actions and its workflow files.
