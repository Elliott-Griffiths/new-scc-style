name: Add File to Server

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to file in repository (e.g., scripts/main.js)'
        required: true
        type: string
      environment:
        description: 'Select the target environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - qa
          - prod

jobs:
  upload-file:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set API Base URL
        run: |
          case "${{ github.event.inputs.environment }}" in
            "dev")
              echo "API_BASE_URL=${{ secrets.VERINT_API_URL_DEV }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_QA }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_PROD }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Determine Folder and Content Type
        id: file-info
        run: |
          file_path="${{ github.event.inputs.file_path }}"
          extension="${file_path##*.}"
          
          case "$extension" in
            "js")
              folder="scripts"
              content_type="text/javascript"
              ;;
            "css")
              folder="styles"
              content_type="text/css"
              ;;
            "png")
              folder="images"
              content_type="image/png"
              ;;
            "jpg" | "jpeg")
              folder="images"
              content_type="image/jpeg"
              ;;
            "svg")
              folder="icons"
              content_type="image/svg+xml"
              ;;
            "txt")
              folder="knowledge"
              content_type="text/plain"
              ;;
            *)
              echo "Error: Unknown file extension for path '$file_path'."
              exit 1
              ;;
          esac
          
          echo "FOLDER_NAME=$folder" >> $GITHUB_ENV
          echo "CONTENT_TYPE=$content_type" >> $GITHUB_ENV
          echo "File path: $file_path"
          echo "Determined folder: $folder"
          echo "Determined content type: $content_type"

      - name: Validate file exists
        run: |
          echo '{"status": "failed", "error": "Unknown error"}' > upload_response.json
          
          FILE_PATH="${{ github.event.inputs.file_path }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File not found: $FILE_PATH"
            echo '{"status": "failed", "error": "File not found"}' > upload_response.json
            exit 1
          fi
          
          echo "✅ File found: $FILE_PATH"
          file_size=$(stat -c%s "$FILE_PATH" 2>/dev/null || echo "unknown")
          echo "📁 File size: ${file_size} bytes"
      
      - name: Test Upload Methods
        env:
          API_USERNAME: ${{ secrets.VERINT_USERNAME }}
          API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
          FILE_PATH: ${{ github.event.inputs.file_path }}
          # The following variables are now set automatically
          FOLDER_NAME: ${{ env.FOLDER_NAME }}
          CONTENT_TYPE: ${{ env.CONTENT_TYPE }}
        run: |
          filename=$(basename "$FILE_PATH")
          echo "🚀 Uploading $filename to folder: $FOLDER_NAME"
          
          # Method 1: Try the exact format that worked for map.js
          echo "Method 1: Testing folderName parameter..."
          response1=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X 'POST' \
            "${API_BASE_URL}/files" \
            -H 'accept: application/json' \
            -u "${API_USERNAME}:${API_PASSWORD}" \
            -H 'Content-Type: multipart/form-data' \
            -F "file=@${FILE_PATH};type=${CONTENT_TYPE}" \
            -F "folderName=${FOLDER_NAME}")
          
          http_code1=$(echo "$response1" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body1=$(echo "$response1" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          
          echo "Method 1 - HTTP Status: $http_code1"
          echo "Method 1 - Response: $body1"
          echo ""
          
          success=false
          final_response=""
          final_code=""
          
          if [ "$http_code1" -eq 200 ] || [ "$http_code1" -eq 201 ]; then
            # Check if the response includes the correct folderName
            folder_in_response=$(echo "$body1" | jq -r '.folderName // empty' 2>/dev/null)
            if [ "$folder_in_response" = "$FOLDER_NAME" ]; then
              echo "✅ Method 1 succeeded with correct folder!"
              success=true
              final_response="$body1"
              final_code="$http_code1"
            else
              echo "⚠️ Method 1 uploaded but folder is wrong: '$folder_in_response' (expected '$FOLDER_NAME')"
            fi
          fi
          
          if [ "$success" = false ]; then
            # Method 2: Try JSON format
            echo "Method 2: Testing JSON Folder format..."
            response2=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X 'POST' \
              "${API_BASE_URL}/files" \
              -H 'accept: application/json' \
              -u "${API_USERNAME}:${API_PASSWORD}" \
              -H 'Content-Type: multipart/form-data' \
              -F "file=@${FILE_PATH};type=${CONTENT_TYPE}" \
              -F "Folder={\"folderName\":\"${FOLDER_NAME}\"}")
            
            http_code2=$(echo "$response2" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            body2=$(echo "$response2" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
            
            echo "Method 2 - HTTP Status: $http_code2"
            echo "Method 2 - Response: $body2"
            echo ""
            
            if [ "$http_code2" -eq 200 ] || [ "$http_code2" -eq 201 ]; then
              folder_in_response=$(echo "$body2" | jq -r '.folderName // empty' 2>/dev/null)
              if [ "$folder_in_response" = "$FOLDER_NAME" ]; then
                echo "✅ Method 2 succeeded with correct folder!"
                success=true
                final_response="$body2"
                final_code="$http_code2"
              else
                echo "⚠️ Method 2 uploaded but folder is wrong: '$folder_in_response' (expected '$FOLDER_NAME')"
              fi
            fi
          fi
          
          if [ "$success" = false ]; then
            # Method 3: Try folder parameter (different name)
            echo "Method 3: Testing 'folder' parameter..."
            response3=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X 'POST' \
              "${API_BASE_URL}/files" \
              -H 'accept: application/json' \
              -u "${API_USERNAME}:${API_PASSWORD}" \
              -H 'Content-Type: multipart/form-data' \
              -F "file=@${FILE_PATH};type=${CONTENT_TYPE}" \
              -F "folder=${FOLDER_NAME}")
            
            http_code3=$(echo "$response3" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            body3=$(echo "$response3" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
            
            echo "Method 3 - HTTP Status: $http_code3"
            echo "Method 3 - Response: $body3"
            echo ""
            
            if [ "$http_code3" -eq 200 ] || [ "$http_code3" -eq 201 ]; then
              folder_in_response=$(echo "$body3" | jq -r '.folderName // empty' 2>/dev/null)
              if [ "$folder_in_response" = "$FOLDER_NAME" ]; then
                echo "✅ Method 3 succeeded with correct folder!"
                success=true
                final_response="$body3"
                final_code="$http_code3"
              fi
            fi
          fi
          
          echo "================== FINAL RESULT =================="
          
          if [ "$success" = true ]; then
            echo "✅ Upload successful with correct folder!"
            echo "Final response: $final_response"
            
            if echo "$final_response" | jq . >/dev/null 2>&1; then
              echo "$final_response" > upload_response.json
            else
              echo '{"status": "success", "message": "Upload successful"}' > upload_response.json
            fi
            
            # Verify the upload by checking the file
            echo ""
            echo "🔍 Verification: Checking uploaded file..."
            filename_check=$(basename "$FILE_PATH")
            verify_response=$(curl -s -u "${API_USERNAME}:${API_PASSWORD}" "${API_BASE_URL}/files?query=${filename_check}")
            
            echo "Verification response:"
            echo "$verify_response" | jq '.' 2>/dev/null || echo "$verify_response"
            
          else
            echo "❌ All upload methods failed or uploaded to wrong folder!"
            echo ""
            echo "Summary of attempts:"
            echo "- Method 1 (folderName): HTTP $http_code1"
            echo "- Method 2 (JSON Folder): HTTP $http_code2"
            echo "- Method 3 (folder): HTTP $http_code3"
            echo ""
            echo "Troubleshooting:"
            echo "- Check if folder '$FOLDER_NAME' exists on the server"
            echo "- Verify folder name case sensitivity"
            echo "- Check if you have permission to upload to this folder"
            
            echo '{"status": "failed", "error": "Upload failed or wrong folder"}' > upload_response.json
            exit 1
          fi
          
          echo "================================================="

      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upload-response-${{ github.run_number }}
          path: |
            upload_response.json
            ${{ github.event.inputs.file_path }}
          retention-days: 7
